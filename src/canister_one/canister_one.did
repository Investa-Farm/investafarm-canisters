type Duration = record { secs : nat64; nanos : nat32 };
type EntityDetails = variant {
  FarmsAgriBusiness : FarmsAgriBusiness;
  NotRegistered;
  Farmer : Farmer;
  SupplyAgriBusiness : SupplyAgriBusiness;
  Investor : Investor;
};
type EntityType = variant {
  FarmsAgriBusiness;
  NotRegistered;
  Farmer;
  SupplyAgriBusiness;
  Investor;
};
type Error = variant {
  ItemsNotEmpty : record { msg : text };
  Error : record { msg : text };
  FieldEmpty : record { msg : text };
  YouAreNotRegistered : record { msg : text };
  ErrorOccured : record { msg : text };
  PrincipalIdAlreadyRegistered : record { msg : text };
  NotAuthorized : record { msg : text };
  MismatchId : record { msg : text };
  FarmNameTaken : record { msg : text };
  AgribusinessNotFound : record { msg : text };
};
type FarmReport = record { title : text; sections : vec Section };
type Farmer = record {
  id : nat64;
  agri_business : text;
  verified : bool;
  current_loan_ask : opt nat64;
  token_collateral : opt TokenCollateral;
  farm_assets : opt vec record { text; record { nat64; nat64 } };
  tags : opt vec text;
  loan_start_time : opt nat64;
  loaned : bool;
  farm_reports : opt vec FarmReport;
  amount_invested : opt nat64;
  funding_round_start_time : opt nat64;
  time_for_funding_round_to_expire : opt Duration;
  ifarm_tokens : opt nat64;
  farmer_name : text;
  insured : opt bool;
  financial_reports : opt vec FinancialReport;
  publish : bool;
  principal_id : principal;
  farm_name : text;
  loan_maturity : opt Duration;
  credit_score : opt nat64;
  investors_ids : principal;
  farm_description : text;
  images : opt vec text;
};
type FarmerReport = record {
  farmer_id : nat64;
  file_name : text;
  farmer_name : text;
  embed_url : text;
};
type FarmsAgriBusiness = record {
  id : nat64;
  verified : bool;
  agribusiness_name : text;
  principal_id : principal;
  total_farmers : nat64;
};
type FinancialReport = record {
  title : text;
  highlights : vec text;
  summary : text;
};
type ICRC1TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type Investor = record {
  id : nat64;
  verified : bool;
  name : text;
  principal_id : principal;
};
type NewFarmer = record {
  farmer_name : text;
  farm_name : text;
  farm_description : text;
};
type NewFarmsAgriBusiness = record {
  agribusiness_name : text;
  total_farmers : nat64;
};
type NewInvestor = record { name : text };
type NewSupplyAgriBusiness = record {
  agribusiness_name : text;
  items_to_be_supplied : opt vec record { text; record { nat64; nat64 } };
};
type Order = record {
  status : OrderStatus;
  farmer_id : nat64;
  total_price : nat64;
  principal_id : principal;
  order_id : nat64;
  items : vec record { text; record { nat64; nat64 } };
  supply_agribusiness_id : nat64;
};
type OrderStatus = variant { Complete; Cancelled; Pending };
type RegisterFarm = record {
  tags : opt vec text;
  farm_reports : opt vec FarmReport;
  farmer_name : opt text;
  financial_reports : opt vec FinancialReport;
  farm_name : opt text;
  farm_description : opt text;
  images : opt vec text;
};
type Result = variant { Ok : Success; Err : Error };
type Result_1 = variant { Ok : text; Err : Error };
type Result_10 = variant { Ok : VerifiedTransactionDetails; Err : text };
type Result_2 = variant { Ok : nat; Err : ICRC1TransferError };
type Result_3 = variant { Ok : RetrieveEthRequest; Err : WithdrawalError };
type Result_4 = variant { Ok : Farmer; Err : Error };
type Result_5 = variant { Ok : FarmsAgriBusiness; Err : Error };
type Result_6 = variant { Ok : Investor; Err : Error };
type Result_7 = variant { Ok : nat64; Err : Error };
type Result_8 = variant { Ok; Err : Error };
type Result_9 = variant { Ok; Err : text };
type RetrieveEthRequest = record { block_index : nat };
type Section = record {
  title : text;
  content : opt text;
  items : opt vec text;
};
type Success = variant {
  FarmsAgriBusinessLogInSuccesfull : record { msg : text };
  CreditScoreAdded : record { msg : text };
  SupplyAgriBusinessLogInSuccesfull : record { msg : text };
  ItemsAdded : record { msg : text };
  FarmsAgriBizRegisteredSuccesfully : record { msg : text };
  SupplyAgriBizRegisteredSuccesfully : record { msg : text };
  FarmerLogInSuccesfull : record { msg : text };
  FarmPublishedSuccesfully : record { msg : text };
  InvestorRegisteredSuccesfully : record { msg : text };
  FarmCreatedSuccesfully : record { msg : text };
  PartialDataStored : record { msg : text };
  FarmDeletedSuccesfully : record { msg : text };
  ReportUploadedSuccesfully : record { msg : text };
  AppliedForLoanSuccesfully : record { msg : text };
  InvestorLogInSuccesfull : record { msg : text };
};
type SupplyAgriBusiness = record {
  id : nat64;
  verified : bool;
  orders : vec Order;
  agribusiness_name : text;
  items_to_be_supplied : opt vec record { text; record { nat64; nat64 } };
  principal_id : principal;
};
type TokenCollateral = record { currency : text; amount : nat64 };
type VerifiedTransactionDetails = record { from : text; amount : text };
type WithdrawalError = variant {
  TemporarilyUnavailable : text;
  InsufficientAllowance : record { allowance : nat };
  AmountTooLow : record { min_withdrawal_amount : nat };
  InsufficientFunds : record { balance : nat };
};
service : {
  add_credit_score : (nat64, nat64) -> (Result);
  add_farm_images : (nat64, opt vec text) -> (Result);
  add_farm_reports : (nat64, opt vec FarmReport) -> (Result);
  add_farm_tags : (nat64, opt vec text) -> (Result);
  add_financial_reports : (nat64, opt vec FinancialReport) -> (Result);
  ask_for_loan : (nat64, nat64, TokenCollateral) -> (Result);
  canister_deposit_principal : () -> (text) query;
  check_entity_type : () -> (EntityType) query;
  check_funding_round_expiry : (nat64) -> (Result_1);
  cketh_balance : () -> (nat);
  cketh_transfer : (text, nat) -> (Result_2);
  cketh_withdraw : (nat, text) -> (Result_3);
  ckusdc_balance : () -> (nat);
  ckusdc_transfer : (text, nat) -> (Result_2);
  ckusdc_withdraw : (nat, text) -> (Result_3);
  delete_farm : (nat64) -> (Result);
  deposit_principal : (text) -> (text) query;
  display_farms : () -> (vec Farmer) query;
  display_farms_agribusinesses : () -> (vec FarmsAgriBusiness) query;
  display_investors : () -> (vec Investor) query;
  display_specific_farm : (nat64) -> (Result_4) query;
  display_specific_farm_agribusiness : (principal) -> (Result_5) query;
  display_specific_investor : (principal) -> (Result_6) query;
  display_supply_agribusinesses : () -> (vec SupplyAgriBusiness) query;
  get_all_transaction_fees : () -> (vec record { text; float64 }) query;
  get_entity_details : () -> (EntityDetails) query;
  get_farmer_report : (nat64) -> (opt FarmerReport) query;
  get_farms_for_agribusiness : () -> (vec Farmer) query;
  get_investments_by_farm : (nat64) -> (
      opt vec record { nat64; float64; text; text },
    ) query;
  get_investments_by_investor : (nat64) -> (
      opt vec record { nat64; float64; text; text },
    ) query;
  get_receipt : (text) -> (text);
  get_remaining_funding_time : (nat64) -> (Result_7) query;
  get_remaining_loan_maturity_time : (nat64) -> (Result_7) query;
  get_usdc_receipt : (text) -> (text);
  initiate_loan : (nat64) -> (Result_8);
  log_in : () -> (Result) query;
  publish_unpublish : (nat64, bool) -> (Result);
  register_farm_details : (nat64, RegisterFarm, text) -> (Result);
  register_farms_agribusiness : (NewFarmsAgriBusiness) -> (Result);
  register_investor : (NewInvestor) -> (Result);
  register_supply_agribusiness : (NewSupplyAgriBusiness) -> (Result);
  register_your_farm : (NewFarmer) -> (Result);
  store_investments : (nat64, float64, nat64, text, text) -> (Result_9);
  store_transaction_fee : (text, float64) -> (Result_9);
  test_frontend : () -> (text) query;
  upload_farm_report : (nat64, FarmerReport) -> (Result);
  uploaded_farmer_report : (text, nat64, text, text) -> (Result);
  verify_cketh_transaction : (text, nat64, nat64) -> (Result_10);
  verify_farmer : (nat64, bool) -> (Result_8);
  verify_farms_agribusiness : (nat64, bool) -> (Result_8);
  verify_investor : (nat64, bool) -> (Result_8);
  verify_supply_agribusiness : (nat64, bool) -> (Result_8);
  verify_usdc_transaction : (text, nat64, nat64) -> (Result_10);
  who_am_i : () -> (principal);
}
